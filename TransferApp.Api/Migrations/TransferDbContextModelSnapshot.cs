// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TransferApp.Api;

#nullable disable

namespace TransferApp.Api.Migrations
{
    [DbContext(typeof(TransferDbContext))]
    partial class TransferDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.8");

            modelBuilder.Entity("TransferApp.Domain.CoupleApplication", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<int>("Doctor1Id")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Doctor2Id")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("Doctor2Id");

                    b.HasIndex("Doctor1Id", "Doctor2Id")
                        .IsUnique();

                    b.ToTable("CoupleApplications");
                });

            modelBuilder.Entity("TransferApp.Domain.District", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Districts");
                });

            modelBuilder.Entity("TransferApp.Domain.Doctor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("MeritRank")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("PartnerDoctorId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("MeritRank")
                        .IsUnique();

                    b.HasIndex("PartnerDoctorId");

                    b.ToTable("Doctors");
                });

            modelBuilder.Entity("TransferApp.Domain.Institution", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("DistrictId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("DistrictId");

                    b.HasIndex("Name", "DistrictId")
                        .IsUnique();

                    b.ToTable("Institutions");
                });

            modelBuilder.Entity("TransferApp.Domain.Preference", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("DoctorId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("OrderIndex")
                        .HasColumnType("INTEGER");

                    b.Property<int>("VacancyId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("VacancyId");

                    b.HasIndex("DoctorId", "VacancyId")
                        .IsUnique();

                    b.ToTable("Preferences");
                });

            modelBuilder.Entity("TransferApp.Domain.Vacancy", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("Count")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Designation")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("InstitutionId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsDifficultStation")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("InstitutionId");

                    b.HasIndex("Designation", "InstitutionId")
                        .IsUnique();

                    b.ToTable("Vacancies");
                });

            modelBuilder.Entity("TransferApp.Domain.CoupleApplication", b =>
                {
                    b.HasOne("TransferApp.Domain.Doctor", "Doctor1")
                        .WithMany("CoupleApplications")
                        .HasForeignKey("Doctor1Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TransferApp.Domain.Doctor", "Doctor2")
                        .WithMany()
                        .HasForeignKey("Doctor2Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Doctor1");

                    b.Navigation("Doctor2");
                });

            modelBuilder.Entity("TransferApp.Domain.Doctor", b =>
                {
                    b.HasOne("TransferApp.Domain.Doctor", "PartnerDoctor")
                        .WithMany("PartneredWith")
                        .HasForeignKey("PartnerDoctorId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("PartnerDoctor");
                });

            modelBuilder.Entity("TransferApp.Domain.Institution", b =>
                {
                    b.HasOne("TransferApp.Domain.District", "District")
                        .WithMany("Institutions")
                        .HasForeignKey("DistrictId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("District");
                });

            modelBuilder.Entity("TransferApp.Domain.Preference", b =>
                {
                    b.HasOne("TransferApp.Domain.Doctor", "Doctor")
                        .WithMany("Preferences")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TransferApp.Domain.Vacancy", "Vacancy")
                        .WithMany("Preferences")
                        .HasForeignKey("VacancyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Doctor");

                    b.Navigation("Vacancy");
                });

            modelBuilder.Entity("TransferApp.Domain.Vacancy", b =>
                {
                    b.HasOne("TransferApp.Domain.Institution", "Institution")
                        .WithMany("Vacancies")
                        .HasForeignKey("InstitutionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Institution");
                });

            modelBuilder.Entity("TransferApp.Domain.District", b =>
                {
                    b.Navigation("Institutions");
                });

            modelBuilder.Entity("TransferApp.Domain.Doctor", b =>
                {
                    b.Navigation("CoupleApplications");

                    b.Navigation("PartneredWith");

                    b.Navigation("Preferences");
                });

            modelBuilder.Entity("TransferApp.Domain.Institution", b =>
                {
                    b.Navigation("Vacancies");
                });

            modelBuilder.Entity("TransferApp.Domain.Vacancy", b =>
                {
                    b.Navigation("Preferences");
                });
#pragma warning restore 612, 618
        }
    }
}
